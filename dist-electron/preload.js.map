{"version":3,"file":"preload.js","sources":["../electron/utils.ts","../electron/preload.ts"],"sourcesContent":["import app from 'electron';\r\nconst iconv = require('iconv-lite'); \r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\n// 工具函数\r\nexport function convertUrlToPath(url: string): string {\r\n  const path = require('path');\r\n  const fs = require('fs');\r\n  \r\n  // 处理blob URL\r\n  if (url.startsWith('blob:')) {\r\n    return url.replace('blob:', '');\r\n  }\r\n  \r\n  // 处理base64数据\r\n  if (url.startsWith('data:')) {\r\n    const matches = url.match(/^data:(.+?);base64,(.+)$/);\r\n    if (!matches || matches.length < 3) {\r\n      throw new Error('无效的base64数据');\r\n    }\r\n    \r\n    const [_, mimeType, base64Data] = matches;\r\n    const ext = mimeType.split('/')[1] || 'bin';\r\n    const tempPath = path.join(\r\n      app.getPath('temp'), \r\n      `temp-${Date.now()}.${ext}`\r\n    );\r\n    \r\n    fs.writeFileSync(tempPath, Buffer.from(base64Data, 'base64'));\r\n    return tempPath;\r\n  }\r\n  \r\n  // 普通文件路径\r\n  return path.normalize(url);\r\n}\r\n\r\nexport function timeToSeconds(time: string): number {\r\n  const parts = time.split(':');\r\n  return parseFloat(parts[0]) * 3600 + \r\n         parseFloat(parts[1]) * 60 + \r\n         parseFloat(parts[2]);\r\n}\r\n\r\n// 修正路径编码（如果乱码）\r\nexport function correctPath(rawPath: string) {\r\n  try {\r\n    // 尝试用GBK解码常见乱码\r\n    const gbkDecoded = iconv.decode(Buffer.from(rawPath, 'binary'), 'gbk');\r\n    \r\n    // 处理特殊乱码情况（如\"瀣э拷\"）\r\n    if (/[^\\u0000-\\uFFFF]/.test(gbkDecoded)) {\r\n      return rawPath.split(path.sep)\r\n        .map(segment => {\r\n          try {\r\n            return iconv.decode(Buffer.from(segment, 'binary'), 'gbk');\r\n          } catch {\r\n            return segment;\r\n          }\r\n        })\r\n        .join(path.sep);\r\n    }\r\n    return gbkDecoded;\r\n  } catch {\r\n    return rawPath; // 解码失败返回原路径\r\n  }\r\n};\r\n\r\n/**\r\n * 验证文件是否存在（自动处理编码问题）\r\n */\r\nexport async function validateFile(filePath: string) {\r\n  const correctedPath = correctPath(filePath);\r\n  const normalizedPath = path.normalize(correctedPath);\r\n  console.log(normalizedPath);\r\n\r\n  if (!fs.existsSync(normalizedPath)) {\r\n    // 尝试原始路径（某些情况下可能需要）\r\n    if (filePath !== normalizedPath && fs.existsSync(filePath)) {\r\n      return filePath;\r\n    }\r\n    throw new Error(`文件不存在: ${normalizedPath}\\n原始路径: ${filePath}`);\r\n  }\r\n  return normalizedPath;\r\n}\r\n\r\nexport const sleep = (waitTimeInMs: number) => new Promise(resolve => setTimeout(resolve, waitTimeInMs))\r\n\r\nexport function encodeArg(args: string) {\r\n  return Buffer.from(args).toString('base64');\r\n}\r\n\r\nexport function decodeArg(args: string) {\r\n  return Buffer.from(args, 'base64').toString('utf-8');\r\n}","// All of the Node.js APIs are available in the preload process.\r\n// It has the same sandbox as a Chrome extension.\r\nimport { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron'\r\nimport { VideoCompositionOptions } from './common/types';\r\nimport { TTSRequestParams } from './services/aliyun-tts';\r\nimport { encodeArg } from './utils';\r\nimport crypto from 'crypto';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  const replaceText = (selector: string, text: string) => {\r\n    const element = document.getElementById(selector)\r\n    if (element) element.innerText = text\r\n  }\r\n\r\n  for (const type of ['chrome', 'node', 'electron']) {\r\n    replaceText(`${type}-version`, process.versions[type] as string)\r\n  }\r\n}) \r\n\r\ncontextBridge.exposeInMainWorld('electronCrypto', {\r\n  getRandomValues: (buffer: ArrayBufferView) => {\r\n    return crypto.getRandomValues(buffer)\r\n  },\r\n  randomUUID: () => crypto.randomUUID()\r\n})\r\n\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  saveVideo: (arrayBuffer: ArrayBuffer) => \r\n    ipcRenderer.invoke('save-video-blob', arrayBuffer),\r\n  \r\n  removeAllListeners: (channel: string): void => {\r\n    ipcRenderer.removeAllListeners(channel)\r\n  },\r\n  showSaveDialog: (options: any) => ipcRenderer.invoke('show-save-dialog', options),\r\n  selectDirectory: () => ipcRenderer.invoke('select-directory'),\r\n  openFile: (path: string) => ipcRenderer.invoke('open-file', path),\r\n  \r\n  onProgress: (callback: (progress: number) => void) => {\r\n    ipcRenderer.on('merge-progress', (_, progress) => callback(progress));\r\n    return () => ipcRenderer.removeAllListeners('merge-progress');\r\n  },\r\n\r\n  mergeMedia: (params: {\r\n    videoPaths: string[];\r\n    audioPaths: string[];\r\n    outputPath: string;\r\n    audioVolumes?: number[];\r\n  }) => ipcRenderer.invoke('merge-media', params),\r\n\r\n  composeVideo: (options: VideoCompositionOptions) => ipcRenderer.invoke('compose-video', options),\r\n\r\n  text2voice: (options: TTSRequestParams, outputDir: string) => ipcRenderer.invoke('text2voice', encodeArg(JSON.stringify({\r\n    options,\r\n    outputDir\r\n  }))),\r\n});"],"names":["encodeArg","args","replaceText","selector","text","element","type","contextBridge","buffer","crypto","arrayBuffer","ipcRenderer","channel","options","path","callback","_","progress","params","outputDir"],"mappings":"iGACc,QAAQ,YAAY,EAuF3B,SAASA,EAAUC,EAAc,CACtC,OAAO,OAAO,KAAKA,CAAI,EAAE,SAAS,QAAQ,CAC5C,CClFA,OAAO,iBAAiB,mBAAoB,IAAM,CAC1C,MAAAC,EAAc,CAACC,EAAkBC,IAAiB,CAChD,MAAAC,EAAU,SAAS,eAAeF,CAAQ,EAC5CE,IAASA,EAAQ,UAAYD,EAAA,EAGnC,UAAWE,IAAQ,CAAC,SAAU,OAAQ,UAAU,EAC9CJ,EAAY,GAAGI,CAAI,WAAY,QAAQ,SAASA,CAAI,CAAW,CAEnE,CAAC,EAEDC,EAAAA,cAAc,kBAAkB,iBAAkB,CAChD,gBAAkBC,GACTC,EAAO,gBAAgBD,CAAM,EAEtC,WAAY,IAAMC,EAAO,WAAW,CACtC,CAAC,EAEDF,EAAAA,cAAc,kBAAkB,cAAe,CAC7C,UAAYG,GACVC,EAAAA,YAAY,OAAO,kBAAmBD,CAAW,EAEnD,mBAAqBE,GAA0B,CAC7CD,cAAY,mBAAmBC,CAAO,CACxC,EACA,eAAiBC,GAAiBF,EAAAA,YAAY,OAAO,mBAAoBE,CAAO,EAChF,gBAAiB,IAAMF,EAAAA,YAAY,OAAO,kBAAkB,EAC5D,SAAWG,GAAiBH,EAAAA,YAAY,OAAO,YAAaG,CAAI,EAEhE,WAAaC,IACXJ,cAAY,GAAG,iBAAkB,CAACK,EAAGC,IAAaF,EAASE,CAAQ,CAAC,EAC7D,IAAMN,EAAY,YAAA,mBAAmB,gBAAgB,GAG9D,WAAaO,GAKPP,EAAAA,YAAY,OAAO,cAAeO,CAAM,EAE9C,aAAeL,GAAqCF,EAAAA,YAAY,OAAO,gBAAiBE,CAAO,EAE/F,WAAY,CAACA,EAA2BM,IAAsBR,cAAY,OAAO,aAAcX,EAAU,KAAK,UAAU,CACtH,QAAAa,EACA,UAAAM,CACD,CAAA,CAAC,CAAC,CACL,CAAC"}